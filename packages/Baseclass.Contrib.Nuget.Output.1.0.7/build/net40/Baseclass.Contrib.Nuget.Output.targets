<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ItemGroup>
		<NupkgFiles Include="$(MSBuildThisFileDirectory)\..\..\..\*\*.nupkg"/>
	</ItemGroup>

	<!-- 
	Is run once per nuspec file in NupkgFiles after build, checks if the .nuspec depends on Baseclass.Contrib.Nuget.Output and copies everything which is in the
	output folder to the builds OutDir.
	-->
	<Target Name="CopyToOutput" Inputs="@(NupkgFiles)" Outputs="%(Identity).Dummy" AfterTargets="Compile">
		<Message Text="Build for %(NupkgFiles.Filename):" />
		<UnzipNuspec Nupkg="%(NupkgFiles.FullPath)" >
			<Output PropertyName="NuspecFile" TaskParameter="NuspecPath" />
		</UnzipNuspec>

		<XmlPeek XmlInputPath="$(NuspecFile)"  
			 Query="/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='dependencies']/*[local-name()='dependency' and @id='Baseclass.Contrib.Nuget.Output']">
			<Output TaskParameter="Result" ItemName="Peeked" />
		</XmlPeek>

		<ItemGroup>
			<FilesToCopy Include="%(NupkgFiles.RelativeDir)\output\**\*.*" />
		</ItemGroup>

		<Copy
				SourceFiles="@(FilesToCopy)"
        DestinationFiles="@(FilesToCopy->'$(OutDir)\%(RecursiveDir)%(Filename)%(Extension)')"
				Condition="'@(Peeked->GetType())' == 'System.String'"
			 />			
		<Message Text="No reference to Baseclass.Contrib.Nuget.Output found" Condition="'@(Peeked->GetType())' != 'System.String'"/> 
	</Target>

	<!-- 
	Is run once per nuspec file in NupkgFiles after clean, checks if the .nuspec depends on Baseclass.Contrib.Nuget.Output and deletes every match in the OutDir. 
	-->
	<Target Name="CleanOutput" Inputs="@(NupkgFiles)" Outputs="%(Identity).Dummy" AfterTargets="Clean">
		<Message Text="Clean for %(NupkgFiles.Filename):" />
		<UnzipNuspec Nupkg="%(NupkgFiles.FullPath)" >
			<Output PropertyName="NuspecFile" TaskParameter="NuspecPath" />
		</UnzipNuspec>

		<XmlPeek XmlInputPath="$(NuspecFile)"  
			 Query="/*[local-name()='package']/*[local-name()='metadata']/*[local-name()='dependencies']/*[local-name()='dependency' and @id='Baseclass.Contrib.Nuget.Output']">
			<Output TaskParameter="Result" ItemName="PeekedForClean" />
		</XmlPeek>

		<ItemGroup>
			<FilesToDelete Include="%(NupkgFiles.RelativeDir)\output\**\*.*" />
		</ItemGroup>

		<Delete
				Files="@(FilesToDelete->'$(OutDir)\%(RecursiveDir)%(Filename)%(Extension)')"
				Condition="'@(PeekedForClean->GetType())' == 'System.String'"
			 />

		<Message Text="No reference to Baseclass.Contrib.Nuget.Output found" Condition="'@(PeekedForClean->GetType())' != 'System.String'"/> 
	</Target>

	<!--
	Is run once per file which has been deleted by the CleanOutput target, if the containing folder is empty it gets deleted.
	-->
	<Target Name="CleanEmptyFolder" Inputs="@(FilesToDelete)" Outputs="%(Identity).Dummy" AfterTargets="CleanOutput">
		<ItemGroup>
			<EmptyCheck Include="$(OutDir)%(FilesToDelete.RecursiveDir)**\*.*" />
		</ItemGroup>

		<RemoveDir 
			Condition="'@(EmptyCheck)' == '' And '%(FilesToDelete.RecursiveDir)' != ''"
			Directories="$(OutDir)%(FilesToDelete.RecursiveDir)" 
		/>
	</Target>

	<UsingTask TaskName="UnzipNuspec" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">
		<ParameterGroup>
			<Nupkg ParameterType="System.String" Required="true" />
			<NuspecPath ParameterType="System.String" Output="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="WindowsBase" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.IO.Packaging" />
			<Using Namespace="System.Threading" />
			<Code Type="Fragment" Language="cs">      
				<![CDATA[                
			var nupkgpath = Path.GetDirectoryName(Nupkg);
			
            using (var archive = Package.Open(Nupkg, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                var nuspec = archive.GetParts().Single(part => part.Uri.ToString().EndsWith(".nuspec"));
                
                NuspecPath = Path.Combine(nupkgpath, Path.GetFileName(nuspec.Uri.ToString()));

                if (!File.Exists(NuspecPath))
                {       
					try
					{
					    using(var outputstream = new FileStream(NuspecPath, FileMode.Create, FileAccess.ReadWrite, FileShare.None))
						{
							using (var nspecstream = nuspec.GetStream())
							{
								nspecstream.CopyTo(outputstream);
							}
						}
					}
					catch(IOException)
					{
						if(!File.Exists(NuspecPath))
						{
							throw;
						}
					}
            	}
				
				// try to open the file until it's available for reading, XmlPeek fails otherwise						
				int retry = 10;
				do
				{
					try {
						using(File.Open(NuspecPath, FileMode.Open, FileAccess.Read, FileShare.Read)) {}
						break;
					} catch (IOException) 
					{
						retry--;
						Thread.Sleep(10);
					}
				} while(retry > 0);
				
				if(retry == 0)
				{
					throw new IOException(string.Format("Can't access nuspec file {0}, it's locked!", NuspecPath));
				}                
            }			
	]]>      
			</Code>
		</Task>
	</UsingTask>
</Project>